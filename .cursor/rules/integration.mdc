---
description: 
globs: 
alwaysApply: false
---
# Memory Bank + Task Magic Integration System

Whenever you use this rule, start your message with the following:

"Integrating Memory Bank and Task Magic systems..."

This rule governs the seamless integration between the Memory Bank system (persistent context) and Task Magic system (operational history), creating a unified AI agent operational framework.

## Integration Architecture

```mermaid
graph TD
    subgraph "Unified System"
        subgraph "Memory Bank Layer"
            MB[memory-bank/]
            MB_Files[Core Context Files]
            MB --> MB_Files
        end
        
        subgraph "Task Magic Layer"
            TM[.ai/]
            TM_Active[Active Tasks & Plans]
            TM_Memory[Historical Archives]
            TM --> TM_Active
            TM --> TM_Memory
        end
        
        subgraph "Integration Layer"
            INT[Integration Controller]
            SYNC[Synchronization Logic]
            TRIG[Trigger Management]
            
            INT --> SYNC
            INT --> TRIG
        end
    end
    
    MB_Files -.-> INT
    TM_Active -.-> INT
    TM_Memory -.-> INT
```

## Unified Operational Modes

### Mode Detection and Switching

```mermaid
flowchart TD
    Start[User Request] --> Parse[Parse Intent]
    
    Parse --> Memory{Memory Bank Operation?}
    Parse --> Task{Task Magic Operation?}
    Parse --> Both{Integrated Operation?}
    
    Memory -->|Yes| MB_Mode[Memory Bank Mode]
    Task -->|Yes| TM_Mode[Task Magic Mode]
    Both -->|Yes| INT_Mode[Integration Mode]
    
    MB_Mode --> Execute[Execute Operation]
    TM_Mode --> Execute
    INT_Mode --> Execute
    
    Execute --> Update[Update Both Systems]
    Update --> Complete[Operation Complete]
```

### Trigger Keywords and Operations

| Trigger | Mode | Primary System | Secondary Update |
|---------|------|---------------|------------------|
| "update memory bank" | Memory Bank | memory-bank/ | .ai/memory/ sync |
| "create task" | Task Magic | .ai/tasks/ | memory-bank/progress.md |
| "complete task" | Integration | Both | Full sync |
| "plan feature" | Integration | .ai/plans/ | memory-bank/activeContext.md |
| "check status" | Integration | Both | Read-only |

## Cross-System Synchronization

### Data Flow Patterns

```mermaid
sequenceDiagram
    participant U as User
    participant A as AI Agent
    participant MB as Memory Bank
    participant TM as Task Magic
    
    U->>A: Request (any trigger)
    
    Note over A: Initialization Phase
    A->>MB: Read all context files
    A->>TM: Check relevant history
    A->>A: Establish unified context
    
    Note over A: Execution Phase
    A->>A: Execute primary operation
    
    Note over A: Synchronization Phase
    alt Memory Bank Primary
        A->>MB: Update memory files
        A->>TM: Sync related task data
    else Task Magic Primary
        A->>TM: Update task/plan data
        A->>MB: Sync related context
    else Integration Operation
        A->>MB: Update memory files
        A->>TM: Update task/plan data
        A->>A: Verify consistency
    end
    
    A->>U: Report completion
```

### Automatic Synchronization Rules

1. **Task Completion → Memory Bank Update**
   ```mermaid
   flowchart LR
   A[Task Completed] --> B[Archive to .ai/memory/]
   B --> C[Update progress.md]
   C --> D[Update activeContext.md]
   D --> E[Sync Complete]
   ```

2. **Memory Bank Update → Task Magic Check**
   ```mermaid
   flowchart LR
   A[Memory Bank Updated] --> B[Check Active Tasks]
   B --> C[Verify Consistency]
   C --> D[Update Task Priorities]
   D --> E[Sync Complete]
   ```

3. **New Pattern Discovery → System-wide Update**
   ```mermaid
   flowchart LR
   A[Pattern Discovered] --> B[Update systemPatterns.md]
   B --> C[Review Active Tasks]
   C --> D[Update Task Strategies]
   D --> E[Archive Pattern Examples]
   ```

## Unified Command Interface

### Command Processing Logic

```mermaid
flowchart TD
    Command[User Command] --> Analyze[Analyze Command Type]
    
    Analyze --> Simple{Simple Operation?}
    
    Simple -->|Yes| Direct[Direct Execution]
    Simple -->|No| Complex[Complex Integration]
    
    Direct --> MB_Op[Memory Bank Only]
    Direct --> TM_Op[Task Magic Only]
    
    Complex --> Both_Op[Both Systems]
    
    MB_Op --> Sync1[Light Sync]
    TM_Op --> Sync2[Light Sync]
    Both_Op --> Sync3[Full Sync]
    
    Sync1 --> Complete
    Sync2 --> Complete
    Sync3 --> Complete
```

### Integration Commands

| Command Pattern | Action | Memory Bank | Task Magic |
|----------------|--------|-------------|------------|
| "start new feature {name}" | Create plan + update context | activeContext.md | .ai/plans/features/ |
| "complete feature {name}" | Archive plan + update progress | progress.md | .ai/memory/plans/ |
| "review project status" | Read all systems | All files | TASKS.md + active |
| "create implementation task" | Task + context update | activeContext.md | .ai/tasks/ |
| "learn from failure" | Pattern + archive | systemPatterns.md | .ai/memory/tasks/ |

## Conflict Resolution

### Data Consistency Management

```mermaid
flowchart TD
    Conflict[Data Conflict Detected] --> Type{Conflict Type}
    
    Type -->|Timing| Time[Timestamp Priority]
    Type -->|Content| Content[Content Merge]
    Type -->|Source| Source[Source Priority]
    
    Time --> Recent[Use Most Recent]
    Content --> Merge[Intelligent Merge]
    Source --> Priority[Memory Bank > Task Magic]
    
    Recent --> Resolve[Conflict Resolved]
    Merge --> Resolve
    Priority --> Resolve
    
    Resolve --> Verify[Verify Consistency]
    Verify --> Complete[Resolution Complete]
```

### Priority Rules

1. **Current State**: activeContext.md > active tasks
2. **Historical Data**: .ai/memory/ > memory-bank/progress.md
3. **System Architecture**: systemPatterns.md > task implementation details
4. **User Intent**: Explicit user updates > automatic sync

## Performance Optimization

### Lazy Loading Strategy

```mermaid
flowchart TD
    Request[User Request] --> Essential[Load Essential Files]
    
    Essential --> Core[Core Memory Bank Files]
    Essential --> Active[Active Task Magic Files]
    
    Core --> Check{Need History?}
    Active --> Check
    
    Check -->|Yes| History[Load Historical Data]
    Check -->|No| Ready[Ready for Operation]
    
    History --> Ready
```

### Caching Strategy

- **Memory Bank Files**: Cache after first read per session
- **Task Magic Active**: Cache and watch for changes
- **Historical Data**: Load on-demand only
- **Cross-references**: Build index after initial load

## Error Handling and Recovery

### System State Recovery

```mermaid
flowchart TD
    Error[System Error] --> Assess[Assess Damage]
    
    Assess --> MB_Error{Memory Bank Issue?}
    Assess --> TM_Error{Task Magic Issue?}
    Assess --> Both_Error{Both Systems?}
    
    MB_Error -->|Yes| MB_Recover[Recover from Task Magic]
    TM_Error -->|Yes| TM_Recover[Recover from Memory Bank]
    Both_Error -->|Yes| Manual[Manual Recovery Required]
    
    MB_Recover --> Verify[Verify Recovery]
    TM_Recover --> Verify
    Manual --> User_Input[Request User Input]
    
    User_Input --> Verify
    Verify --> Complete[Recovery Complete]
```

### Backup and Rollback

- **Automatic Backup**: Before major updates
- **Rollback Capability**: Restore previous state
- **Consistency Checks**: Verify integrity after operations
- **User Notification**: Alert on critical errors

## Best Practices for Integration

1. **Atomic Operations**: Complete updates across both systems or rollback
2. **Consistency First**: Verify data alignment before proceeding
3. **User Transparency**: Clearly communicate cross-system updates
4. **Minimal Redundancy**: Avoid duplicating information across systems
5. **Performance Awareness**: Optimize for common operation patterns

## Integration Health Monitoring

### System Health Checks

```mermaid
flowchart TD
    Health[Health Check] --> Files[Check File Integrity]
    Files --> Sync[Check Synchronization]
    Sync --> Consistency[Check Consistency]
    
    Consistency --> Issues{Issues Found?}
    
    Issues -->|Yes| Report[Report Issues]
    Issues -->|No| Healthy[System Healthy]
    
    Report --> Auto{Auto-fixable?}
    Auto -->|Yes| Fix[Auto-fix Issues]
    Auto -->|No| Alert[Alert User]
    
    Fix --> Verify[Verify Fix]
    Alert --> Manual[Manual Intervention]
    
    Verify --> Healthy
    Manual --> Healthy
```

This integration system ensures that Memory Bank and Task Magic work together seamlessly, providing both persistent context and operational history in a unified, intelligent framework.